```{r imports}
#| verbose: False
#| warning: False
library(tidyverse)
library(tidycensus)
library(fpp3)
library(sf)
library(patchwork)
library(gganimate)

files <- list.files("downloads", full.names = TRUE)
homicide_data <- tibble(series = c(), month = c(), homicides = c(), ori = c())

for(file_path in files){
  temp_file <- read.csv(file_path)|> slice(-2) |> # slice off the second junk row
    pivot_longer(cols = starts_with("X"), names_to = "month", values_to = "homicides")|> # pivot
    mutate(ori =  str_split(file_path, "[/.]")[[1]][2])|> # name ori column the ori from the filepath
    mutate(month = my(sub("^X", "", month)))|> # month year conversion
    mutate(year = year(month)) # year column
  # add in temp_file to total file
  homicide_data <- bind_rows(homicide_data, temp_file)
}

vars_5 <- c(
  median_household_income_5 = "B19013_001",  # Median household income
  total_population_5        = "B01003_001"   # Total population
)

vars_1 <- c(
  median_household_income_1 = "B19013_001",  # Median household income
  total_population_1        = "B01003_001"   # Total population
)

vars_dec <- c(
  total_population_dec      = "P1_001N"
)


### 5 year acs estimates ###
# Pull ACS data for all variables at county level for MN
years = c(2009, 2014, 2019, 2023) # 2019-2023 acs5 overlaps the 2019 year and is not perfectly representative of the change
acs_5yr_ts <- map_df(years, function(y) {
  get_acs(
    geography = "county",
    survey = "acs5",
    variables = vars_5,
    state = "MN",
    year = y,
    geometry = TRUE
  ) |>
    select(GEOID, variable, estimate) |>
    mutate(
      GEOID = as.character(GEOID),
      year = y
    ) |>
    pivot_wider(names_from = variable, values_from = estimate)
})

### 1 year acs estimates ###
# 2020 estimates https://www.census.gov/programs-surveys/acs/data/experimental-data/1-year.html
years = setdiff(2005:2024, 2020) # acs 1 with 2020 missing due to covid bias
acs_1yr_ts <- map_df(years, function(y) {
  get_acs(
    geography = "county",
    survey = "acs1",
    variables = vars_1,
    state = "MN",
    year = y,
    geometry = FALSE
  ) |>
    select(GEOID, variable, estimate) |>
    mutate(
      GEOID = as.character(GEOID),
      year = y
    ) |>
    pivot_wider(names_from = variable, values_from = estimate)
})

# decennial true counts from April 1 2020 to replace missing year of 2020 acs1 data
# wont have other variables, but does have TRUE pop
decennial_pop <- get_decennial(
  geography = "county",
  variables = vars_dec,
  year = 2020,
  geometry = FALSE,
  state = "MN"
)|>
  select(GEOID, variable, value) |>
  mutate(
    GEOID = as.character(GEOID),
    year = 2020
  ) |>
  pivot_wider(names_from = variable, values_from = value)

acs_1yr_ts <- bind_rows(acs_1yr_ts,
                             decennial_pop|>rename(total_population_1 = total_population_dec))|>
              add_count(GEOID) |>       # count how many times each GEOID appears
              filter(n > 1) |>           # remove counties not in acs 1 survey
              select(-n)                  # drop the helper column

# bring in and join ai generated mappings, they look pretty good
mapping <- read.csv("ai_mappings.csv") |> mutate(GEOID = as.character(GEOID))

# join in geometry with the mapping from the 5 year acs data
county_geometry <- acs_5yr_ts |>
  select(GEOID, geometry) |>
  distinct(GEOID, .keep_all = TRUE)

acs_5yr_ts <- acs_5yr_ts|> st_drop_geometry()

mapping <- left_join(mapping, county_geometry)
```

```{r joining}
homicide_data <- homicide_data|>
    left_join(mapping, by = join_by(ori), relationship = "many-to-many")|> # join in mapping variables
    left_join(acs_1yr_ts, by = join_by(GEOID, year))|> # join to acs1 data by county and year
    left_join(acs_5yr_ts, by = join_by(GEOID, year))|> # join to acs5 data by county and year
    distinct(series, month, .keep_all = TRUE)|> # drop some duplicates left over
    group_by(month)|>
    drop_na(homicides)|> # drop na homicde years, primarily from smaller depts early on in the data
    ungroup() 

# collapse data into a form that is able to work with 1 year census data
yearly_large_county_data <- homicide_data |>
  group_by(county, year)|>
  mutate(homicides = sum(homicides))|>
  select(-series, -month, -ori, -type)|>
  distinct()|>
  drop_na(county)|> # remove non county related homicides (Federal or state)
  st_as_sf() # save as sf object for mapping
```

```{r homicides_and_pop_spatial_time_series}
#| warning: False
  
plot_census_data <- function(year_to_plot){
  
  map_data <- yearly_large_county_data|>
    filter(year == year_to_plot)
  
  # Plot homicides
  homicides_plot <- ggplot(map_data) +
    geom_sf(aes(fill = homicides), color = "white") +  # white borders between counties
    scale_fill_viridis_c(option = "plasma", trans = "log10", 
                         name = "homicides") +        # log scale for better contrast
    labs(
      title = paste("     Homicides in", year_to_plot),
      caption = "Source: FBI Crime data"
    ) +
    theme_minimal() +
    theme(axis.text = element_blank(),
          axis.ticks = element_blank(),
          legend.position = "none")
  
  # Plot acs 5 pop
  pop5_plot <- map_data|>
    drop_na(total_population_5)|>
    ggplot() +
    geom_sf(aes(fill = total_population_5), color = "white") +  # white borders between counties
    scale_fill_viridis_c(option = "plasma", trans = "log10", 
                         name = "Total Population") +        # log scale for better contrast
    labs(
      title = paste("Population in", year_to_plot),
      caption = "Source: ACS 5 estimates"
    ) +
    theme_minimal() +
    theme(axis.text = element_blank(),
          axis.ticks = element_blank(),
          legend.position = "none")
  
  # Plot acs 1 pop
  pop1_plot <- map_data|>
    ggplot() +
    geom_sf(aes(fill = total_population_1), color = "white") +  # white borders between counties
    scale_fill_viridis_c(option = "plasma", trans = "log10", 
                         name = "Total Population") +        # log scale for better contrast
    labs(
      title = paste("Population in", year_to_plot),
      caption = "Source: ACS 1 estimates"
    ) +
    theme_minimal() +
    theme(axis.text = element_blank(),
          axis.ticks = element_blank(),
          legend.position = "none")
  
  return(pop5_plot + pop1_plot + homicides_plot)
}

# demonstrate the diffs between acs5 and acs1
# showing that homicides rarely occur outside of >65k pop counties
plot_census_data(2005)
plot_census_data(2009)
plot_census_data(2014)
plot_census_data(2019)
plot_census_data(2023)
plot_census_data(2024)
```

```{r homicides_time_series}
# Monthly totals
monthly_ts <- homicide_data |>
  group_by(month) |>
  summarise(homicides = sum(homicides), .groups = "drop") |>
  mutate(type = "Monthly")  # Add type for plotting

# Yearly totals
yearly_ts <- homicide_data |>
  group_by(year, county) |>
  summarise(
    population = first(total_population_1),  # take one value per county
    homicides = sum(homicides, na.rm = TRUE),
    .groups = "drop"
  ) |>
  group_by(year) |>
  summarise(
    population = sum(population, na.rm = TRUE),  # now only sum once per county
    homicides = sum(homicides, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    month = as.Date(paste0(year, "-01-01")),
    type = "Yearly"
  ) |>
  select(month, homicides, population, type)

# plotting df
combined_ts <- bind_rows(monthly_ts, yearly_ts)

# show the reasons for using yearly data due to how monthly is reported
ggplot(combined_ts, aes(x = month, y = homicides, color = type)) +
  geom_line(size = 1) +
  geom_point(data = subset(combined_ts, type == "Yearly"), size = 2) +  # emphasize yearly points
  scale_color_manual(values = c("Monthly" = "steelblue", "Yearly" = "darkblue")) +
  theme_minimal() +
  labs(title = "Minnesota Homicides Over Time", x = "Date", y = "Homicides", color = "Time Period")


# refactor yearly_ts data to only contain acs1 counties to compare homicide rates to population counts
yearly_ts <- homicide_data|>
  filter(GEOID %in% acs_1yr_ts$GEOID)|>
  group_by(year, county) |>
  summarise(
    population = first(total_population_1),  # take one value per county
    homicides = sum(homicides, na.rm = TRUE),
    .groups = "drop"
  ) |>
  group_by(year) |>
  summarise(
    population = sum(population, na.rm = TRUE),  # now only sum once per county
    homicides = sum(homicides, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    month = as.Date(paste0(year, "-01-01")),
    type = "Yearly"
  ) |>
  select(month, homicides, population, type)
  
  

# show homicides vs population relationship
# Compute a scaling factor to map population into homicide scale
yearly_ts <- yearly_ts|>
  mutate(population = ifelse(population == 0, NA, population))|>drop_na()

scale_factor <- max(yearly_ts$homicides, na.rm = TRUE) / max(yearly_ts$population, na.rm = TRUE)

ggplot(yearly_ts, aes(x = month)) +
  # Population line (left axis, true scale)
  geom_line(aes(y = population, color = "Population"), size = 1, linetype = "dashed") +
  geom_point(aes(y = population, color = "Population"), size = 2) +
  
  # Homicides line (right axis, scaled down)
  geom_line(aes(y = homicides / scale_factor, color = "Homicides"), size = 1) +
  geom_point(aes(y = homicides / scale_factor, color = "Homicides"), size = 2) +
  
  scale_y_continuous(
    name = "Population",
    sec.axis = sec_axis(~ . * scale_factor, name = "Homicides")
  ) +
  scale_color_manual(
    values = c("Population" = "firebrick", "Homicides" = "darkblue")
  ) +
  theme_minimal() +
  labs(
    title = "Minnesota Population vs Homicides Over Time for ACS1 Counties",
    x = "Year",
    color = "",
    caption = "Source: ACS1 estimates; using Decennial counts for 2020"
  )


# plot PC change in homicides
yearly_large_county_data|>
  st_drop_geometry()|>
  drop_na(total_population_1, homicides)|>
  group_by(year)|>
  reframe(homicides_pc = sum(homicides) / sum(total_population_1))|>
  ggplot(aes(x = year, y = homicides_pc))+
  geom_line(size = 1, color = "darkblue")+
  geom_point()+
  theme_minimal()+
  labs(title = "Minnesota Homicides per Capita Over Time for ACS1 Counties", 
       x = "Date", y = "Homicides per Capita", 
       caption = "Source: FBI Crime data, and ACS1 estimates; using Decennial counts for 2020")



# stl decomp for seasonality, not too useful if doing yearly data
# homicide_data|> 
#   mutate(month = yearmonth(month))|>
#   as_tsibble(index = month, key = c(series))|>
#   summarise(homicides = sum(homicides), .groups = "drop") |>
#   filter(year(month)>=2013)|>
#   model(stl = STL(homicides))|>
#   components()|>
#   autoplot()+
#     theme_minimal()
```



```{r}
# Plot homicides PC
# yearly_large_county_data|>
#   filter(year == 2024)|>
#   ggplot() +
#   geom_sf(aes(fill = homicides/total_population_1), color = "white") +  # white borders between counties
#   scale_fill_viridis_c(option = "plasma", trans = "log10", 
#                        name = "Homicides per Capita") +        # log scale for better contrast
#   labs(
#     title = paste("Homicides per Capita in", 2023),
#     caption = "Source: ACS 1 estimates"
#   ) +
#   theme_minimal() +
#   theme(axis.text = element_blank(),
#         axis.ticks = element_blank(),
#         legend.position = "bottom")
```




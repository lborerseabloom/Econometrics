```{r imports}
#| verbose: False
#| warning: False
library(tidyverse)
library(tidycensus)
library(fpp3)
library(sf)
library(patchwork)

homicide_data <- read_csv("crime_data.csv")
```

```{r census_imports}
options(tigris_use_cache = TRUE)

vars_5 <- c(
  total_population_5        = "B01003_001"   # Total population
)

vars_1 <- c(
  total_population_1        = "B01003_001",  # Total population
  white_population          = "B02001_002",  # White population
  
  # Income
  median_household_income   = "B19013_001",  # Median household income (dollars)
  households_total          = "B19001_001",  # Total households
  households_income_lt5k    = "B19001_002",  # Households with income < $5,000
  
  # Education - only available from 2008 on
  edu_total_25plus          = "B15003_001",  # Total population 25 years and over
  edu_hs_grad               = "B15003_017",  # High school graduate
  edu_some_college_lt1yr    = "B15003_018",
  edu_some_college_gt1yr    = "B15003_019",
  edu_assoc_degree          = "B15003_020",
  edu_bachelors             = "B15003_021",
  edu_masters               = "B15003_022",
  edu_professional_degree   = "B15003_023",
  edu_doctorate             = "B15003_024",
  
  # Children living arrangements
  children_total            = "B09001_001",  # Total population under 18 years
  children_w_mother_only    = "B09001_004",  # Living with mother only
  children_w_father_only    = "B09001_005",  # Living with father only
  children_no_parents       = "B09001_006"   # Not living with either parent
)

vars_dec <- c(
  total_population_dec      = "P1_001N"      # Total population
)


### 5 year acs estimates ###
# Pull ACS data for all variables at county level for MN
years = c(2009, 2014, 2019, 2023) # 2019-2023 acs5 overlaps the 2019 year and is not perfectly representative of the change
acs_5yr_ts <- map_df(years, function(y) {
  get_acs(
    geography = "county",
    survey = "acs5",
    variables = vars_5,
    state = "MN",
    year = y,
    geometry = TRUE
  ) |>
    select(GEOID, variable, estimate) |>
    mutate(
      GEOID = as.character(GEOID),
      year = y
    ) |>
    pivot_wider(names_from = variable, values_from = estimate)
})

### 1 year acs estimates ###
# 2020 estimates https://www.census.gov/programs-surveys/acs/data/experimental-data/1-year.html
years = setdiff(2008:2024, 2020) # acs 1 with 2020 missing due to covid bias
acs_1yr_ts <- map_df(years, function(y) {
  get_acs(
    geography = "county",
    survey = "acs1",
    variables = vars_1,
    state = "MN",
    year = y,
    geometry = FALSE
  ) |>
    select(GEOID, variable, estimate) |>
    mutate(
      GEOID = as.character(GEOID),
      year = y
    ) |>
    pivot_wider(names_from = variable, values_from = estimate)
})

# decennial true counts from April 1 2020 to replace missing year of 2020 acs1 data
# wont have other variables, but does have TRUE pop
decennial_pop <- get_decennial(
  geography = "county",
  variables = vars_dec,
  year = 2020,
  geometry = FALSE,
  state = "MN"
)|>
  select(GEOID, variable, value) |>
  mutate(
    GEOID = as.character(GEOID),
    year = 2020
  ) |>
  pivot_wider(names_from = variable, values_from = value)

acs_1yr_ts <- bind_rows(acs_1yr_ts,
                             decennial_pop|>rename(total_population_1 = total_population_dec))|>
              add_count(GEOID) |>       # count how many times each GEOID appears
              filter(n > 1) |>           # remove counties not in acs 1 survey
              select(-n)                  # drop the helper column

# bring in and join ai generated mappings, they look pretty good
mapping <- read.csv("ai_mappings.csv") |> mutate(GEOID = as.character(GEOID))
alc_effects <- read.csv("ai_alcohol_effects.csv")|>
  rename(county = Location)|>
  mutate(county = toupper(county))

# join in geometry with the mapping from the 5 year acs data
county_geometry <- acs_5yr_ts |>
  select(GEOID, geometry) |>
  distinct(GEOID, .keep_all = TRUE)

acs_5yr_ts <- acs_5yr_ts|> st_drop_geometry()

mapping <- left_join(mapping, county_geometry)|>
  left_join(alc_effects)
```

```{r joining}
homicide_data <- homicide_data|>
    left_join(mapping, by = join_by(ori), relationship = "many-to-many")|> # join in mapping variables
    left_join(acs_1yr_ts, by = join_by(GEOID, year))|> # join to acs1 data by county and year
    left_join(acs_5yr_ts, by = join_by(GEOID, year))|> # join to acs5 data by county and year
    distinct(series, month, .keep_all = TRUE)|> # drop some duplicates left over
    group_by(month)|>
    drop_na(homicides)|> # drop na homicide years, primarily from smaller depts early on in the data
    ungroup() 

# collapse data for mapping acs_5 vs acs_1 vs homicides by county
mapping_yearly_data <- homicide_data |>
  group_by(county, year)|>
  mutate(homicides = sum(homicides))|>
  select(-series, -month, -ori, -type)|>
  distinct()|>
  st_as_sf() # save as sf object for mapping

acs_1_yearly_data <- homicide_data |>
  # summarize homicides and officer counts by county and year
  group_by(county, year)|>
  mutate(homicides = sum(homicides),
         officers = mean(officers, na.rm = TRUE))|>
  select(-series, -month, -ori, -type)|>
  distinct()|>
  # linear interpolation for 2020 years and 2018 education estimates for geoid 27019  
  ungroup(year)|>
  arrange(year)|>
  mutate(across(all_of(names(vars_1)), ~ zoo::na.approx(., x = year, na.rm = FALSE))) |>
  # calculate aggregate stats
  ungroup()|>
  mutate(pct_lessthan_5kincome = (households_income_lt5k / households_total) * 100,
         pct_highschool_or_greater = (edu_hs_grad + edu_some_college_lt1yr + 
            edu_some_college_gt1yr + edu_assoc_degree + 
            edu_bachelors + edu_masters + 
            edu_professional_degree + edu_doctorate) / edu_total_25plus * 100,
         pct_children_missing_parents = (children_w_mother_only + children_w_father_only + children_no_parents) / children_total * 100,
         periods = year - min(acs_1yr_ts$year),
         post_covid = ifelse(year>=2020, 1, 0),
         msp_main_counties = ifelse(county %in% c("RAMSEY", "HENNEPIN"), 1, 0),
         pct_non_white = 1 - (white_population / total_population_1))|>
  # final cleaning
  filter(county != "CLAY")|> # first acs1 year for clay is 2020, interpolation for 2020 wont work 
  drop_na(total_population_1)|>
  select(-total_population_5)|>
  st_as_sf() # save as sf object for mapping
```

```{r homicides_and_pop_spatial_time_series}
#| warning: False
  
plot_census_data <- function(year_to_plot){
  
  map_data <- mapping_yearly_data|>
    filter(year == year_to_plot)
  
  # Plot homicides
  homicides_plot <- ggplot(map_data) +
    geom_sf(aes(fill = homicides), color = "white") +  # white borders between counties
    scale_fill_viridis_c(option = "plasma", trans = "log10", 
                         name = "homicides") +        # log scale for better contrast
    labs(
      title = paste("     Homicides in", year_to_plot),
      caption = "Source: FBI Crime data"
    ) +
    theme_minimal() +
    theme(axis.text = element_blank(),
          axis.ticks = element_blank(),
          legend.position = "none")
  
  # Plot acs 5 pop
  pop5_plot <- map_data|>
    drop_na(total_population_5)|>
    ggplot() +
    geom_sf(aes(fill = total_population_5), color = "white") +  # white borders between counties
    scale_fill_viridis_c(option = "plasma", trans = "log10", 
                         name = "Total Population") +        # log scale for better contrast
    labs(
      title = paste("Population in", year_to_plot),
      caption = "Source: ACS 5 estimates"
    ) +
    theme_minimal() +
    theme(axis.text = element_blank(),
          axis.ticks = element_blank(),
          legend.position = "none")
  
  # Plot acs 1 pop
  pop1_plot <- map_data|>
    ggplot() +
    geom_sf(aes(fill = total_population_1), color = "white") +  # white borders between counties
    scale_fill_viridis_c(option = "plasma", trans = "log10", 
                         name = "Total Population") +        # log scale for better contrast
    labs(
      title = paste("Population in", year_to_plot),
      caption = "Source: ACS 1 estimates"
    ) +
    theme_minimal() +
    theme(axis.text = element_blank(),
          axis.ticks = element_blank(),
          legend.position = "none")
  
  return(pop5_plot + pop1_plot + homicides_plot)
}

# demonstrate the diffs between acs5 and acs1
# showing that homicides rarely occur outside of >65k pop counties
plot_census_data(2008)
plot_census_data(2009)
plot_census_data(2014)
plot_census_data(2019)
plot_census_data(2023)
plot_census_data(2024)
```

```{r homicides_time_series}
# Monthly totals
monthly_ts <- homicide_data |>
  group_by(month) |>
  summarise(homicides = sum(homicides), .groups = "drop") |>
  mutate(type = "Monthly")  # Add type for plotting

# Yearly totals
yearly_ts <- homicide_data |>
  group_by(year, county) |>
  summarise(
    population = first(total_population_1),  # take one value per county
    homicides = sum(homicides, na.rm = TRUE),
    .groups = "drop"
  ) |>
  group_by(year) |>
  summarise(
    population = sum(population, na.rm = TRUE),  # now only sum once per county
    homicides = sum(homicides, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    month = as.Date(paste0(year, "-01-01")),
    type = "Yearly"
  ) |>
  select(month, homicides, population, type)

# plotting df
combined_ts <- bind_rows(monthly_ts, yearly_ts)

# show the reasons for using yearly data due to how monthly is reported
ggplot(combined_ts, aes(x = month, y = homicides, color = type)) +
  geom_line(size = 1) +
  geom_point(data = subset(combined_ts, type == "Yearly"), size = 2) +  # emphasize yearly points
  scale_color_manual(values = c("Monthly" = "steelblue", "Yearly" = "darkblue")) +
  theme_minimal() +
  labs(title = "Minnesota Homicides Over Time", x = "Date", y = "Homicides", color = "Time Period")


# refactor yearly_ts data to only contain acs1 counties to compare homicide rates to population counts
yearly_ts <- homicide_data|>
  filter(GEOID %in% acs_1yr_ts$GEOID)|>
  group_by(year, county) |>
  summarise(
    population = first(total_population_1),  # take one value per county
    homicides = sum(homicides, na.rm = TRUE),
    .groups = "drop"
  ) |>
  group_by(year) |>
  summarise(
    population = sum(population, na.rm = TRUE),  # now only sum once per county
    homicides = sum(homicides, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    month = as.Date(paste0(year, "-01-01")),
    type = "Yearly"
  ) |>
  select(month, homicides, population, type)
  


# show homicides vs population relationship
# Compute a scaling factor to map population into homicide scale
yearly_ts <- yearly_ts|>
  mutate(population = ifelse(population == 0, NA, population))|>drop_na()

scale_factor <- max(yearly_ts$homicides, na.rm = TRUE) / max(yearly_ts$population, na.rm = TRUE)

ggplot(yearly_ts, aes(x = month)) +
  # Population line (left axis, true scale)
  geom_line(aes(y = population, color = "Population"), size = 1, linetype = "dashed") +
  geom_point(aes(y = population, color = "Population"), size = 2) +
  
  # Homicides line (right axis, scaled down)
  geom_line(aes(y = homicides / scale_factor, color = "Homicides"), size = 1) +
  geom_point(aes(y = homicides / scale_factor, color = "Homicides"), size = 2) +
  
  scale_y_continuous(
    name = "Population",
    sec.axis = sec_axis(~ . * scale_factor, name = "Homicides")
  ) +
  scale_color_manual(
    values = c("Population" = "firebrick", "Homicides" = "darkblue")
  ) +
  theme_minimal() +
  labs(
    title = "Minnesota Population vs Homicides Over Time for ACS1 Counties",
    x = "Year",
    color = "",
    caption = "Source: ACS1 estimates; using Decennial counts for 2020"
  )


# plot PC change in homicides
yearly_ts|>
  group_by(month)|>
  reframe(homicides_pc = sum(homicides) / sum(population))|>
  ggplot(aes(x = month, y = homicides_pc))+
  geom_line(size = 1, color = "darkblue")+
  geom_point()+
  theme_minimal()+
  labs(title = "Minnesota Homicides per Capita Over Time for ACS1 Counties", 
       x = "Date", y = "Homicides per Capita", 
       caption = "Source: FBI Crime data, and ACS1 estimates; using Decennial counts for 2020")

acs_1_yearly_data|>
  ggplot(aes(x = homicides))+
  geom_density()+
  theme_minimal()+
  labs(title = "Distribution of Minnesota Homicides by County by Year", 
       x = "Date", y = "Homicides per Capita", 
       caption = "Source: FBI Crime data, and ACS1 estimates; using Decennial counts for 2020")
```



```{r}
cor(
  acs_1_yearly_data |> 
    st_drop_geometry() |>                 # drop geometry if it's still there
    select(homicides, periods, post_covid, msp_main_counties, officers, median_household_income, pct_lessthan_5kincome, pct_highschool_or_greater, pct_children_missing_parents, pct_non_white, Binge.drinking.prevalence),
  use = "pairwise.complete.obs",
  method = "pearson"
)
```

```{r}
model <- lm(homicides ~ post_covid + officers + msp_main_counties + 
    pct_lessthan_5kincome + pct_highschool_or_greater + pct_children_missing_parents + 
    median_household_income + Binge.drinking.prevalence + pct_non_white, data = acs_1_yearly_data)
summary(model)
```


